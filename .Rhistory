display_numbers = TRUE, # Mostrar los valores en el gráfico
fontsize_number = 8, # Ajustar el tamaño de las etiquetas de los números
fontsize = 10, # Tamaño de la fuente general
fontsize_row = 6, # Tamaño de la fuente para las filas
fontsize_col = 10, # Tamaño de la fuente para las columnas
cluster_rows = FALSE,cluster_cols = FALSE
)
#
grobs_heatmap1 <- as.grob(heatmap1)
filas_filtradas <- subset(tratamientos, promedio_filas >= 0.005 & promedio_filas < 0.4)
heatmap2 <- pheatmap(
as.matrix(filas_filtradas),
main = paste0("Heatmap ", sub(".csv", "", nivelTaxonomico)),
color = colores_personalizados,
display_numbers = TRUE, # Mostrar los valores en el gráfico
fontsize_number = 8, # Ajustar el tamaño de las etiquetas de los números
fontsize = 10, # Tamaño de la fuente general
fontsize_row = 6, # Tamaño de la fuente para las filas
fontsize_col = 10, # Tamaño de la fuente para las columnas
cluster_rows = FALSE,cluster_cols = FALSE
)
grobs_heatmap2 <- as.grob(heatmap2)
# filas_filtradas <- subset(tratamientos, promedio_filas >= 0.00 & promedio_filas < 0.005)
# heatmap3 <- pheatmap(
#   as.matrix(filas_filtradas),
#   main = paste0("Heatmap ", sub(".csv", "", nivelTaxonomico)),
#   color = colores_personalizados,
#   display_numbers = TRUE, # Mostrar los valores en el gráfico
#   fontsize_number = 8, # Ajustar el tamaño de las etiquetas de los números
#   fontsize = 10, # Tamaño de la fuente general
#   fontsize_row = 6, # Tamaño de la fuente para las filas
#   fontsize_col = 10, # Tamaño de la fuente para las columnas
#   cluster_rows = FALSE,cluster_cols = FALSE
# )
# grobs_heatmap3 <- as.grob(heatmap3)
ventana1 <- grid.arrange( grobs_heatmap1,grobs_heatmap2, ncol = 2, nrow = 1)
}
graficos_phylum <- function(tratamientos){
promedio_filas <- rowMeans(tratamientos)
valor_umbral <- mean(as.matrix(tratamientos))
sd <- sd(as.matrix(tratamientos))
#filas_filtradas <- subset(tratamientos, promedio_filas >= valor_umbral)
filas_filtradas <- subset(tratamientos, promedio_filas >= 0.01)
heatmap1 <- pheatmap(
as.matrix(filas_filtradas),
main = paste0("Heatmap ", sub(".csv", "", nivelTaxonomico)),
color = colores_personalizados,
display_numbers = TRUE, # Mostrar los valores en el gráfico
fontsize_number = 14, # Ajustar el tamaño de las etiquetas de los números
fontsize = 12, # Tamaño de la fuente general
fontsize_row = 12, # Tamaño de la fuente para las filas
fontsize_col = 12, # Tamaño de la fuente para las columnas
cluster_rows = FALSE,cluster_cols = FALSE
)
#grobs_heatmap1 <- as.grob(heatmap1)
# filas_filtradas <- subset(tratamientos, promedio_filas >= 0.00 & promedio_filas < 0.01)
# heatmap2 <- pheatmap(
#   as.matrix(filas_filtradas),
#   main = paste0("Heatmap ", sub(".csv", "", nivelTaxonomico)),
#   color = colores_personalizados,
#   display_numbers = TRUE, # Mostrar los valores en el gráfico
#   fontsize_number = 8, # Ajustar el tamaño de las etiquetas de los números
#   fontsize = 10, # Tamaño de la fuente general
#   fontsize_row = 6, # Tamaño de la fuente para las filas
#   fontsize_col = 10, # Tamaño de la fuente para las columnas
#   cluster_rows = FALSE,cluster_cols = FALSE
# )
# grobs_heatmap2 <- as.grob(heatmap2)
#ventana1 <- grid.arrange( grobs_heatmap1, grobs_heatmap2, ncol = 2, nrow = 1)
}
graficos_dominio <- function(tratamientos){
promedio_filas <- rowMeans(tratamientos)
valor_umbral <- mean(as.matrix(tratamientos))
sd <- sd(as.matrix(tratamientos))
#filas_filtradas <- subset(tratamientos, promedio_filas >= valor_umbral)
# Crear una paleta de colores que va de azul claro a rojo
filas_filtradas <- subset(tratamientos, promedio_filas >= 0.2)
# Ordenar las filas según el nombre del eje x
heatmap1 <- pheatmap(
as.matrix(filas_filtradas),
main = paste0("Heatmap ", sub(".csv", "", nivelTaxonomico)),
color = colores_personalizados,
display_numbers = TRUE, # Mostrar los valores en el gráfico
fontsize_number = 16, # Ajustar el tamaño de las etiquetas de los números
fontsize = 10, # Tamaño de la fuente general
fontsize_row = 6, # Tamaño de la fuente para las filas
fontsize_col = 10, # Tamaño de la fuente para las columnas
cluster_rows = FALSE,cluster_cols = FALSE
)
}
setwd("/biodatas/biodata5/proyectos/metagenomica/magneto-condor/gbtk/manual/conteos_por_tratamientos/")
source("funciones.R")
nivelTaxonomico="dominios.csv"
#' ----------------------------------------------------------------------------------------------
#' 1. Cargo los archivos
#' ----------------------------------------------------------------------------------------------
organic <- fread(paste0("organic_",nivelTaxonomico), na.strings = c(NA,""), header = T, data.table = F)
transition <- fread(paste0("transition_",nivelTaxonomico), na.strings = c(NA,""), header = T, data.table = F)
conventional <- fread(paste0("conventional_",nivelTaxonomico), na.strings = c(NA,""), header = T, data.table = F)
comp <- fread(paste0("comp_",nivelTaxonomico), na.strings = c(NA,""), header = T, data.table = F)
hatico <- fread(paste0("org_",nivelTaxonomico), na.strings = c(NA,""), header = T, data.table = F)
#' ----------------------------------------------------------------------------------------------
#' 2. Acomodo los datos para luego usarlos en el heatMap
#' ----------------------------------------------------------------------------------------------
organic_f1 <- organic[c("Tax", "Porcetage")]
transition_f1 <- transition[c("Tax", "Porcetage")]
conventional_f1 <- conventional[c("Tax", "Porcetage")]
comp_f1 <- comp[c("Tax", "Porcetage")]
hatico_f1 <- hatico[c("Tax", "Porcetage")]
#' ----------------------------------------------------------------------------------------------
#' 3. Uno todos los datos para representarlos en un HeatMap. Quito los simbolos de %
#' ----------------------------------------------------------------------------------------------
tratamientos <- merge(merge(organic_f1, transition_f1, by="Tax", all = TRUE), conventional_f1,  by="Tax", all = TRUE)
tratamientos <- merge(tratamientos, comp_f1, by="Tax", all = TRUE)
tratamientos <- merge(tratamientos, hatico_f1, by="Tax", all = TRUE)
tratamientos[is.na(tratamientos)] <- 0
colnames(tratamientos) <- c("Taxas","Organic", "Transition", "Convetional", "Compostaje", "Hatico")
# Convertir las columnas de porcentaje a numérico
tratamientos[,2:6] <- lapply(tratamientos[,2:6], function(x) as.numeric(sub("%", "", x)))
#' ----------------------------------------------------------------------------------------------
#' 4. Generacion de graficos de resultados.
#' ----------------------------------------------------------------------------------------------
row.names(tratamientos)=tratamientos$Taxas
tratamientos <- tratamientos[,-1]
tratamientos <- round(tratamientos, 2)
tratamientos <- tratamientos[order(rownames(tratamientos)), ]
colores_personalizados <- colorRampPalette(c("#F6FBFE", "#add8e6", "#ffff00", "#e53624"))(100)
if (nivelTaxonomico == "dominios.csv") {
graficos_dominio(tratamientos)
}
if (nivelTaxonomico == "phylum.csv") {
graficos_phylum(tratamientos)
}
if (nivelTaxonomico == "clase.csv") {
graficos_clase(tratamientos)
}
if (nivelTaxonomico == "orden.csv") {
graficos_orden(tratamientos)
}
if (nivelTaxonomico == "familia.csv") {
graficos_familia(tratamientos)
}
if (nivelTaxonomico == "genero.csv") {
graficos_genero(tratamientos)
}
if(nivelTaxonomico == "especie.csv") {
graficos_especie(tratamientos) ## este tiene 2 ventadas de 4 cada una.
}
tratamientos$organismos <- row.names(tratamientos)
write_xlsx(tratamientos, paste0(sub(".csv", "", nivelTaxonomico), "_taxonomia.xlsx"))
View(graficos_clase)
#' ----------------------------------------------------------------------------------------------
#' 3. Uno todos los datos para representarlos en un HeatMap. Quito los simbolos de %
#' ----------------------------------------------------------------------------------------------
tratamientos <- merge(merge(organic_f1, transition_f1, by="Tax", all = TRUE), conventional_f1,  by="Tax", all = TRUE)
install.packages("renv")
renv::init()
pwd
getwd()
setwd("~/Desktop/SHINY-APPS/shiny_app")
getwd()
renv::init()
shiny::runApp()
runApp()
runApp()
#                       "sommer","gtools","lme4","openxlsx","car","shinycssloaders",
#                       "remotes","shinyFiles", "readr","lsmeans", "emmeans","grafify", "shinyBS")
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# if(length(new.packages)) {install.packages(new.packages)}
# install.packages("remotes")
# remotes::install_github("daattali/shinycssloaders")
# invisible(lapply(list.of.packages, library, character.only = TRUE))
# install.packages("renv")
# install.packages("R.utils")
# install.packages("R.utils")
install.packages("promises")
#                       "sommer","gtools","lme4","openxlsx","car","shinycssloaders",
#                       "remotes","shinyFiles", "readr","lsmeans", "emmeans","grafify", "shinyBS")
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# if(length(new.packages)) {install.packages(new.packages)}
# install.packages("remotes")
# remotes::install_github("daattali/shinycssloaders")
# invisible(lapply(list.of.packages, library, character.only = TRUE))
# install.packages("renv")
# install.packages("R.utils")
# install.packages("R.utils")
install.packages("promises")
install.packages("future")
runApp()
runApp()
runApp()
renv::status()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::restore()
renv::status()
renv::deactivate()
shiny::runApp()
runApp()
# remove.packages("dplyr")
install.packages("dplyr",dependencies=TRUE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pwd
getpwd()
getwd()
setwd("/home/estuvar4/Desktop/SHINY-APPS/varianza_shiny_app")
getwd()
runApp()
runApp()
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#
list.of.packages <- c("shiny", "remotes", "shinyFiles", "shinycssloaders", "dplyr",
"tidyverse", "stringr", "data.table", "sommer", "gtools",
"lme4", "openxlsx", "car", "readr", "lsmeans", "emmeans",
"grafify", "promises", "future")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
install.packages("remotes")
remotes::install_github("daattali/shinycssloaders")
list.of.packages <- c(
"shiny", "shinyjs", "shinyBS", "remotes", "shinycssloaders", "shinyFiles"
)
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
install.packages("remotes")
remotes::install_github("daattali/shinycssloaders")
shiny::runApp()
runApp()
library(shiny)
library(remotes)
library(shinyFiles)
library(shinycssloaders)
library(dplyr)
library(tidyverse)
library(stringr)
library(data.table)
library(sommer)
library(gtools)
library(lme4)
library(openxlsx)
library(car)
library(readr)
library(lsmeans)
library(emmeans)
library(grafify)
library(promises)
library(future)
source("global.R")
# Tamaño maximo de archivo en bytes
options(shiny.maxRequestSize=100 * 1024^2)
# Sessiones asyncronas
plan(multisession)
runApp()
getwd()
runApp()
runApp()
install.packages("shinyjs")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("R.utils")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
shiny::runApp()
runApp()
runApp()
df1 <- data.frame(
group = factor(c("A", "A", "B", "B")),
value = c(1, 2, 3, 4)
)
df2 <- data.frame(
group = factor(c("A", "A", "A")),
value = c(5, 6, 7)
)
df3 <- data.frame(
group = factor(c("B", "B", "C", "C")),
value = c(8, 9, 10, 11)
)
xlin <- list(df1, df2, df3)
verificar_factores <- function(df) {
factores <- sapply(df, is.factor)
if (any(factores)) {
niveles <- sapply(df[, factores, drop = FALSE], function(x) length(unique(x)))
return(all(niveles > 1))
}
return(TRUE) # Si no hay factores, considerar que está bien
}
verificacion <- sapply(xlin, verificar_factores)
print(verificacion)
runApp()
runApp()
getwd()
a = fread("data/prueba_by_V1.csv")
unique(a$Ambiente)
j =  split(a, a$Ambiente)
xlin <- j
View(verificar_factores)
verificacion <- sapply(xlin, verificar_factores)
print(verificacion)
runApp()
runApp()
runApp()
ds1 = a
ds1$BYZZZZ = ds1$Ambiente
varianza <- function( var,ds, fijos = 1, aleatorios = NULL, heteroce = "No",
varcom = NULL, VB = FALSE, class_var, HET = NULL,
TestFixed = "No" ) {
cv = colnames(ds)[grep(paste(paste0("^",class_var,"$"), collapse = "|"), colnames(ds), ignore.case = T)]
ds <- ds %>% mutate_at(c(paste(cv)), as.factor)
if (!is.null(HET)) {
ds <- ds %>% mutate(HET = get(HET))
}
vr = colnames(ds)[grep(paste0("^",var,"$"), colnames(ds), ignore.case = T)]
if (TestFixed %in% TestFixed[grep(paste(c("Si","Yes"), collapse = "|"),
TestFixed,ignore.case = T)]) {
if (is.null(aleatorios)){
fj = (paste0(c(vr," ~ ",paste0(c(fijos), collapse =  "+")),
collapse = "" ))
md = as.formula(paste0(fj))
qwe <- lm(formula = md, data = ds)
} else {
fj = (paste0(c(vr," ~ ",paste0(c(fijos), collapse =  "+")),
collapse = "" ))
al = (paste0("(1|",aleatorios,")", collapse = "+" ))
md = as.formula(paste0(fj,"+",al))
qwe <- lmer(formula = md, data = ds, REML = T)
}
} else if (TestFixed %in% TestFixed[grep(paste(c("No"), collapse = "|"),
TestFixed,ignore.case = T)]) {
if (heteroce %in% heteroce[grep(paste(c("Si","Yes"), collapse = "|"), heteroce,ignore.case = T  )]) {
if (is.null(aleatorios)){
qwe = mmer( fixed =  as.formula(paste0(c(vr," ~ ",paste0(c(fijos), collapse =  "+") ), collapse = "" )),
init =varcom ,
data=ds,
rcov = ~vsr(dsr(HET), units),
dateWarning = F,
verbose = VB)
} else {
qwe = mmer( fixed =  as.formula(paste0(c(vr," ~ ",paste0(c(fijos), collapse =  "+") ), collapse = "" )),
random = as.formula(paste0(c(" ~ ",paste0(c(aleatorios), collapse =  "+") ), collapse = "" )),
init=varcom,
data=ds,
rcov = ~vsr(dsr(HET), units),
dateWarning = F,
verbose = VB)
}
} else if (heteroce %in% heteroce[grep(paste(c("NO"), collapse = "|"),
heteroce,ignore.case = T  )]) {
if (is.null(aleatorios)){
qwe = mmer( fixed =  as.formula(paste0(c(vr," ~ ",paste0(c(fijos), collapse =  "+") ), collapse = "" )),
init =varcom ,
data=ds,
rcov = ~units,dateWarning = F, verbose = VB)
} else {
qwe = mmer( fixed =  as.formula(paste0(c(vr," ~ ",paste0(c(fijos), collapse =  "+") ), collapse = "" )),
random = as.formula(paste0(c(" ~ ",paste0(c(aleatorios), collapse =  "+") ), collapse = "" )),
init =varcom ,
data=ds,
rcov = ~units,dateWarning = F, verbose = VB)
}
}
}
return(qwe)
}
runApp()
by <- "Ambiente"
var <- "Poblacion"
fijos <- "Name"
aleatorios <- "Rep"
heteroce <- "NO"
varcom <- NULL  # NULL en R se utiliza para valores vacíos
VB <- FALSE
HET <- NULL
TestFixed <- "SI"
class_var <- c("Rep", "Block", "Name")
result <- lapply(split(ds1, ds1$BYZZZZ), function(xlin) {
varianza(var = var, ds = xlin, fijos = fijos,
aleatorios = aleatorios, heteroce = heteroce,
varcom = varcom, VB = VB, class_var = class_var,
HET = HET, TestFixed = TestFixed)
})
by <- c("Ambiente", "Name")
var <- "Poblacion"
fijos <- "Name"
aleatorios <- "Rep"
heteroce <- "NO"
varcom <- NULL  # NULL en R se utiliza para valores vacíos
VB <- FALSE
HET <- NULL
TestFixed <- "SI"
class_var <- c("Rep", "Block", "Name")
result <- lapply(split(ds1, ds1$BYZZZZ), function(xlin) {
varianza(var = var, ds = xlin, fijos = fijos,
aleatorios = aleatorios, heteroce = heteroce,
varcom = varcom, VB = VB, class_var = class_var,
HET = HET, TestFixed = TestFixed)
})
result <- sapply(split(ds1, ds1$BYZZZZ), function(xlin) {
varianza(var = var, ds = xlin, fijos = fijos,
aleatorios = aleatorios, heteroce = heteroce,
varcom = varcom, VB = VB, class_var = class_var,
HET = HET, TestFixed = TestFixed)
})
ds1$BYZZZZ <- as.factor(ds1$Ambiente)
result <- lapply(split(ds1, ds1$BYZZZZ), function(xlin) {
varianza(var = var, ds = xlin, fijos = fijos,
aleatorios = aleatorios, heteroce = heteroce,
varcom = varcom, VB = VB, class_var = class_var,
HET = HET, TestFixed = TestFixed)
})
runApp()
runApp()
